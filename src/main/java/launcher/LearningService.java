package launcher; /**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-21")
public class LearningService {

  public interface Iface {

    public void learn(List<List<List<Double>>> inputData, List<List<Double>> targets, short epochSize, short batchSize) throws TException;

    public List<List<Double>> precit(List<List<List<Double>>> inputData) throws TException;

  }

  public interface AsyncIface {

    public void learn(List<List<List<Double>>> inputData, List<List<Double>> targets, short epochSize, short batchSize, AsyncMethodCallback resultHandler) throws TException;

    public void precit(List<List<List<Double>>> inputData, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void learn(List<List<List<Double>>> inputData, List<List<Double>> targets, short epochSize, short batchSize) throws TException
    {
      send_learn(inputData, targets, epochSize, batchSize);
      recv_learn();
    }

    public void send_learn(List<List<List<Double>>> inputData, List<List<Double>> targets, short epochSize, short batchSize) throws TException
    {
      learn_args args = new learn_args();
      args.setInputData(inputData);
      args.setTargets(targets);
      args.setEpochSize(epochSize);
      args.setBatchSize(batchSize);
      sendBase("learn", args);
    }

    public void recv_learn() throws TException
    {
      learn_result result = new learn_result();
      receiveBase(result, "learn");
      return;
    }

    public List<List<Double>> precit(List<List<List<Double>>> inputData) throws TException
    {
      send_precit(inputData);
      return recv_precit();
    }

    public void send_precit(List<List<List<Double>>> inputData) throws TException
    {
      precit_args args = new precit_args();
      args.setInputData(inputData);
      sendBase("precit", args);
    }

    public List<List<Double>> recv_precit() throws TException
    {
      precit_result result = new precit_result();
      receiveBase(result, "precit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "precit failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void learn(List<List<List<Double>>> inputData, List<List<Double>> targets, short epochSize, short batchSize, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      learn_call method_call = new learn_call(inputData, targets, epochSize, batchSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class learn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<List<List<Double>>> inputData;
      private List<List<Double>> targets;
      private short epochSize;
      private short batchSize;
      public learn_call(List<List<List<Double>>> inputData, List<List<Double>> targets, short epochSize, short batchSize, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inputData = inputData;
        this.targets = targets;
        this.epochSize = epochSize;
        this.batchSize = batchSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("learn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        learn_args args = new learn_args();
        args.setInputData(inputData);
        args.setTargets(targets);
        args.setEpochSize(epochSize);
        args.setBatchSize(batchSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_learn();
      }
    }

    public void precit(List<List<List<Double>>> inputData, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      precit_call method_call = new precit_call(inputData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class precit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<List<List<Double>>> inputData;
      public precit_call(List<List<List<Double>>> inputData, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inputData = inputData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("precit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        precit_args args = new precit_args();
        args.setInputData(inputData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<Double>> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_precit();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("learn", new learn());
      processMap.put("precit", new precit());
      return processMap;
    }

    public static class learn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, learn_args> {
      public learn() {
        super("learn");
      }

      public learn_args getEmptyArgsInstance() {
        return new learn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public learn_result getResult(I iface, learn_args args) throws TException {
        learn_result result = new learn_result();
        iface.learn(args.inputData, args.targets, args.epochSize, args.batchSize);
        return result;
      }
    }

    public static class precit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, precit_args> {
      public precit() {
        super("precit");
      }

      public precit_args getEmptyArgsInstance() {
        return new precit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public precit_result getResult(I iface, precit_args args) throws TException {
        precit_result result = new precit_result();
        result.success = iface.precit(args.inputData);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("learn", new learn());
      processMap.put("precit", new precit());
      return processMap;
    }

    public static class learn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, learn_args, Void> {
      public learn() {
        super("learn");
      }

      public learn_args getEmptyArgsInstance() {
        return new learn_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            learn_result result = new learn_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            learn_result result = new learn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, learn_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.learn(args.inputData, args.targets, args.epochSize, args.batchSize,resultHandler);
      }
    }

    public static class precit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, precit_args, List<List<Double>>> {
      public precit() {
        super("precit");
      }

      public precit_args getEmptyArgsInstance() {
        return new precit_args();
      }

      public AsyncMethodCallback<List<List<Double>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<Double>>>() { 
          public void onComplete(List<List<Double>> o) {
            precit_result result = new precit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            precit_result result = new precit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, precit_args args, AsyncMethodCallback<List<List<Double>>> resultHandler) throws TException {
        iface.precit(args.inputData,resultHandler);
      }
    }

  }

  public static class learn_args implements org.apache.thrift.TBase<learn_args, learn_args._Fields>, java.io.Serializable, Cloneable, Comparable<learn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("learn_args");

    private static final org.apache.thrift.protocol.TField INPUT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("inputData", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TARGETS_FIELD_DESC = new org.apache.thrift.protocol.TField("targets", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField EPOCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("epochSize", org.apache.thrift.protocol.TType.I16, (short)3);
    private static final org.apache.thrift.protocol.TField BATCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("batchSize", org.apache.thrift.protocol.TType.I16, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new learn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new learn_argsTupleSchemeFactory());
    }

    public List<List<List<Double>>> inputData; // required
    public List<List<Double>> targets; // required
    public short epochSize; // required
    public short batchSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT_DATA((short)1, "inputData"),
      TARGETS((short)2, "targets"),
      EPOCH_SIZE((short)3, "epochSize"),
      BATCH_SIZE((short)4, "batchSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT_DATA
            return INPUT_DATA;
          case 2: // TARGETS
            return TARGETS;
          case 3: // EPOCH_SIZE
            return EPOCH_SIZE;
          case 4: // BATCH_SIZE
            return BATCH_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EPOCHSIZE_ISSET_ID = 0;
    private static final int __BATCHSIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT_DATA, new org.apache.thrift.meta_data.FieldMetaData("inputData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))))));
      tmpMap.put(_Fields.TARGETS, new org.apache.thrift.meta_data.FieldMetaData("targets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      tmpMap.put(_Fields.EPOCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("epochSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.BATCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("batchSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(learn_args.class, metaDataMap);
    }

    public learn_args() {
    }

    public learn_args(
      List<List<List<Double>>> inputData,
      List<List<Double>> targets,
      short epochSize,
      short batchSize)
    {
      this();
      this.inputData = inputData;
      this.targets = targets;
      this.epochSize = epochSize;
      setEpochSizeIsSet(true);
      this.batchSize = batchSize;
      setBatchSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public learn_args(learn_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetInputData()) {
        List<List<List<Double>>> __this__inputData = new ArrayList<List<List<Double>>>(other.inputData.size());
        for (List<List<Double>> other_element : other.inputData) {
          List<List<Double>> __this__inputData_copy = new ArrayList<List<Double>>(other_element.size());
          for (List<Double> other_element_element : other_element) {
            List<Double> __this__inputData_copy_copy = new ArrayList<Double>(other_element_element);
            __this__inputData_copy.add(__this__inputData_copy_copy);
          }
          __this__inputData.add(__this__inputData_copy);
        }
        this.inputData = __this__inputData;
      }
      if (other.isSetTargets()) {
        List<List<Double>> __this__targets = new ArrayList<List<Double>>(other.targets.size());
        for (List<Double> other_element : other.targets) {
          List<Double> __this__targets_copy = new ArrayList<Double>(other_element);
          __this__targets.add(__this__targets_copy);
        }
        this.targets = __this__targets;
      }
      this.epochSize = other.epochSize;
      this.batchSize = other.batchSize;
    }

    public learn_args deepCopy() {
      return new learn_args(this);
    }

    @Override
    public void clear() {
      this.inputData = null;
      this.targets = null;
      setEpochSizeIsSet(false);
      this.epochSize = 0;
      setBatchSizeIsSet(false);
      this.batchSize = 0;
    }

    public int getInputDataSize() {
      return (this.inputData == null) ? 0 : this.inputData.size();
    }

    public java.util.Iterator<List<List<Double>>> getInputDataIterator() {
      return (this.inputData == null) ? null : this.inputData.iterator();
    }

    public void addToInputData(List<List<Double>> elem) {
      if (this.inputData == null) {
        this.inputData = new ArrayList<List<List<Double>>>();
      }
      this.inputData.add(elem);
    }

    public List<List<List<Double>>> getInputData() {
      return this.inputData;
    }

    public learn_args setInputData(List<List<List<Double>>> inputData) {
      this.inputData = inputData;
      return this;
    }

    public void unsetInputData() {
      this.inputData = null;
    }

    /** Returns true if field inputData is set (has been assigned a value) and false otherwise */
    public boolean isSetInputData() {
      return this.inputData != null;
    }

    public void setInputDataIsSet(boolean value) {
      if (!value) {
        this.inputData = null;
      }
    }

    public int getTargetsSize() {
      return (this.targets == null) ? 0 : this.targets.size();
    }

    public java.util.Iterator<List<Double>> getTargetsIterator() {
      return (this.targets == null) ? null : this.targets.iterator();
    }

    public void addToTargets(List<Double> elem) {
      if (this.targets == null) {
        this.targets = new ArrayList<List<Double>>();
      }
      this.targets.add(elem);
    }

    public List<List<Double>> getTargets() {
      return this.targets;
    }

    public learn_args setTargets(List<List<Double>> targets) {
      this.targets = targets;
      return this;
    }

    public void unsetTargets() {
      this.targets = null;
    }

    /** Returns true if field targets is set (has been assigned a value) and false otherwise */
    public boolean isSetTargets() {
      return this.targets != null;
    }

    public void setTargetsIsSet(boolean value) {
      if (!value) {
        this.targets = null;
      }
    }

    public short getEpochSize() {
      return this.epochSize;
    }

    public learn_args setEpochSize(short epochSize) {
      this.epochSize = epochSize;
      setEpochSizeIsSet(true);
      return this;
    }

    public void unsetEpochSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EPOCHSIZE_ISSET_ID);
    }

    /** Returns true if field epochSize is set (has been assigned a value) and false otherwise */
    public boolean isSetEpochSize() {
      return EncodingUtils.testBit(__isset_bitfield, __EPOCHSIZE_ISSET_ID);
    }

    public void setEpochSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EPOCHSIZE_ISSET_ID, value);
    }

    public short getBatchSize() {
      return this.batchSize;
    }

    public learn_args setBatchSize(short batchSize) {
      this.batchSize = batchSize;
      setBatchSizeIsSet(true);
      return this;
    }

    public void unsetBatchSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BATCHSIZE_ISSET_ID);
    }

    /** Returns true if field batchSize is set (has been assigned a value) and false otherwise */
    public boolean isSetBatchSize() {
      return EncodingUtils.testBit(__isset_bitfield, __BATCHSIZE_ISSET_ID);
    }

    public void setBatchSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BATCHSIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT_DATA:
        if (value == null) {
          unsetInputData();
        } else {
          setInputData((List<List<List<Double>>>)value);
        }
        break;

      case TARGETS:
        if (value == null) {
          unsetTargets();
        } else {
          setTargets((List<List<Double>>)value);
        }
        break;

      case EPOCH_SIZE:
        if (value == null) {
          unsetEpochSize();
        } else {
          setEpochSize((Short)value);
        }
        break;

      case BATCH_SIZE:
        if (value == null) {
          unsetBatchSize();
        } else {
          setBatchSize((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT_DATA:
        return getInputData();

      case TARGETS:
        return getTargets();

      case EPOCH_SIZE:
        return getEpochSize();

      case BATCH_SIZE:
        return getBatchSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT_DATA:
        return isSetInputData();
      case TARGETS:
        return isSetTargets();
      case EPOCH_SIZE:
        return isSetEpochSize();
      case BATCH_SIZE:
        return isSetBatchSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof learn_args)
        return this.equals((learn_args)that);
      return false;
    }

    public boolean equals(learn_args that) {
      if (that == null)
        return false;

      boolean this_present_inputData = true && this.isSetInputData();
      boolean that_present_inputData = true && that.isSetInputData();
      if (this_present_inputData || that_present_inputData) {
        if (!(this_present_inputData && that_present_inputData))
          return false;
        if (!this.inputData.equals(that.inputData))
          return false;
      }

      boolean this_present_targets = true && this.isSetTargets();
      boolean that_present_targets = true && that.isSetTargets();
      if (this_present_targets || that_present_targets) {
        if (!(this_present_targets && that_present_targets))
          return false;
        if (!this.targets.equals(that.targets))
          return false;
      }

      boolean this_present_epochSize = true;
      boolean that_present_epochSize = true;
      if (this_present_epochSize || that_present_epochSize) {
        if (!(this_present_epochSize && that_present_epochSize))
          return false;
        if (this.epochSize != that.epochSize)
          return false;
      }

      boolean this_present_batchSize = true;
      boolean that_present_batchSize = true;
      if (this_present_batchSize || that_present_batchSize) {
        if (!(this_present_batchSize && that_present_batchSize))
          return false;
        if (this.batchSize != that.batchSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_inputData = true && (isSetInputData());
      list.add(present_inputData);
      if (present_inputData)
        list.add(inputData);

      boolean present_targets = true && (isSetTargets());
      list.add(present_targets);
      if (present_targets)
        list.add(targets);

      boolean present_epochSize = true;
      list.add(present_epochSize);
      if (present_epochSize)
        list.add(epochSize);

      boolean present_batchSize = true;
      list.add(present_batchSize);
      if (present_batchSize)
        list.add(batchSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(learn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInputData()).compareTo(other.isSetInputData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputData, other.inputData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTargets()).compareTo(other.isSetTargets());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTargets()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targets, other.targets);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEpochSize()).compareTo(other.isSetEpochSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEpochSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.epochSize, other.epochSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBatchSize()).compareTo(other.isSetBatchSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBatchSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchSize, other.batchSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("learn_args(");
      boolean first = true;

      sb.append("inputData:");
      if (this.inputData == null) {
        sb.append("null");
      } else {
        sb.append(this.inputData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("targets:");
      if (this.targets == null) {
        sb.append("null");
      } else {
        sb.append(this.targets);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("epochSize:");
      sb.append(this.epochSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("batchSize:");
      sb.append(this.batchSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class learn_argsStandardSchemeFactory implements SchemeFactory {
      public learn_argsStandardScheme getScheme() {
        return new learn_argsStandardScheme();
      }
    }

    private static class learn_argsStandardScheme extends StandardScheme<learn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, learn_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.inputData = new ArrayList<List<List<Double>>>(_list0.size);
                  List<List<Double>> _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    {
                      org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                      _elem1 = new ArrayList<List<Double>>(_list3.size);
                      List<Double> _elem4;
                      for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                      {
                        {
                          org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                          _elem4 = new ArrayList<Double>(_list6.size);
                          double _elem7;
                          for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                          {
                            _elem7 = iprot.readDouble();
                            _elem4.add(_elem7);
                          }
                          iprot.readListEnd();
                        }
                        _elem1.add(_elem4);
                      }
                      iprot.readListEnd();
                    }
                    struct.inputData.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setInputDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TARGETS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                  struct.targets = new ArrayList<List<Double>>(_list9.size);
                  List<Double> _elem10;
                  for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                  {
                    {
                      org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                      _elem10 = new ArrayList<Double>(_list12.size);
                      double _elem13;
                      for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                      {
                        _elem13 = iprot.readDouble();
                        _elem10.add(_elem13);
                      }
                      iprot.readListEnd();
                    }
                    struct.targets.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setTargetsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EPOCH_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.epochSize = iprot.readI16();
                struct.setEpochSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BATCH_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.batchSize = iprot.readI16();
                struct.setBatchSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, learn_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inputData != null) {
          oprot.writeFieldBegin(INPUT_DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.inputData.size()));
            for (List<List<Double>> _iter15 : struct.inputData)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter15.size()));
                for (List<Double> _iter16 : _iter15)
                {
                  {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter16.size()));
                    for (double _iter17 : _iter16)
                    {
                      oprot.writeDouble(_iter17);
                    }
                    oprot.writeListEnd();
                  }
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.targets != null) {
          oprot.writeFieldBegin(TARGETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.targets.size()));
            for (List<Double> _iter18 : struct.targets)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter18.size()));
                for (double _iter19 : _iter18)
                {
                  oprot.writeDouble(_iter19);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EPOCH_SIZE_FIELD_DESC);
        oprot.writeI16(struct.epochSize);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BATCH_SIZE_FIELD_DESC);
        oprot.writeI16(struct.batchSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class learn_argsTupleSchemeFactory implements SchemeFactory {
      public learn_argsTupleScheme getScheme() {
        return new learn_argsTupleScheme();
      }
    }

    private static class learn_argsTupleScheme extends TupleScheme<learn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, learn_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInputData()) {
          optionals.set(0);
        }
        if (struct.isSetTargets()) {
          optionals.set(1);
        }
        if (struct.isSetEpochSize()) {
          optionals.set(2);
        }
        if (struct.isSetBatchSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetInputData()) {
          {
            oprot.writeI32(struct.inputData.size());
            for (List<List<Double>> _iter20 : struct.inputData)
            {
              {
                oprot.writeI32(_iter20.size());
                for (List<Double> _iter21 : _iter20)
                {
                  {
                    oprot.writeI32(_iter21.size());
                    for (double _iter22 : _iter21)
                    {
                      oprot.writeDouble(_iter22);
                    }
                  }
                }
              }
            }
          }
        }
        if (struct.isSetTargets()) {
          {
            oprot.writeI32(struct.targets.size());
            for (List<Double> _iter23 : struct.targets)
            {
              {
                oprot.writeI32(_iter23.size());
                for (double _iter24 : _iter23)
                {
                  oprot.writeDouble(_iter24);
                }
              }
            }
          }
        }
        if (struct.isSetEpochSize()) {
          oprot.writeI16(struct.epochSize);
        }
        if (struct.isSetBatchSize()) {
          oprot.writeI16(struct.batchSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, learn_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.inputData = new ArrayList<List<List<Double>>>(_list25.size);
            List<List<Double>> _elem26;
            for (int _i27 = 0; _i27 < _list25.size; ++_i27)
            {
              {
                org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                _elem26 = new ArrayList<List<Double>>(_list28.size);
                List<Double> _elem29;
                for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                {
                  {
                    org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                    _elem29 = new ArrayList<Double>(_list31.size);
                    double _elem32;
                    for (int _i33 = 0; _i33 < _list31.size; ++_i33)
                    {
                      _elem32 = iprot.readDouble();
                      _elem29.add(_elem32);
                    }
                  }
                  _elem26.add(_elem29);
                }
              }
              struct.inputData.add(_elem26);
            }
          }
          struct.setInputDataIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.targets = new ArrayList<List<Double>>(_list34.size);
            List<Double> _elem35;
            for (int _i36 = 0; _i36 < _list34.size; ++_i36)
            {
              {
                org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _elem35 = new ArrayList<Double>(_list37.size);
                double _elem38;
                for (int _i39 = 0; _i39 < _list37.size; ++_i39)
                {
                  _elem38 = iprot.readDouble();
                  _elem35.add(_elem38);
                }
              }
              struct.targets.add(_elem35);
            }
          }
          struct.setTargetsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.epochSize = iprot.readI16();
          struct.setEpochSizeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.batchSize = iprot.readI16();
          struct.setBatchSizeIsSet(true);
        }
      }
    }

  }

  public static class learn_result implements org.apache.thrift.TBase<learn_result, learn_result._Fields>, java.io.Serializable, Cloneable, Comparable<learn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("learn_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new learn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new learn_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(learn_result.class, metaDataMap);
    }

    public learn_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public learn_result(learn_result other) {
    }

    public learn_result deepCopy() {
      return new learn_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof learn_result)
        return this.equals((learn_result)that);
      return false;
    }

    public boolean equals(learn_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(learn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("learn_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class learn_resultStandardSchemeFactory implements SchemeFactory {
      public learn_resultStandardScheme getScheme() {
        return new learn_resultStandardScheme();
      }
    }

    private static class learn_resultStandardScheme extends StandardScheme<learn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, learn_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, learn_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class learn_resultTupleSchemeFactory implements SchemeFactory {
      public learn_resultTupleScheme getScheme() {
        return new learn_resultTupleScheme();
      }
    }

    private static class learn_resultTupleScheme extends TupleScheme<learn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, learn_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, learn_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class precit_args implements org.apache.thrift.TBase<precit_args, precit_args._Fields>, java.io.Serializable, Cloneable, Comparable<precit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("precit_args");

    private static final org.apache.thrift.protocol.TField INPUT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("inputData", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new precit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new precit_argsTupleSchemeFactory());
    }

    public List<List<List<Double>>> inputData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT_DATA((short)1, "inputData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT_DATA
            return INPUT_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT_DATA, new org.apache.thrift.meta_data.FieldMetaData("inputData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(precit_args.class, metaDataMap);
    }

    public precit_args() {
    }

    public precit_args(
      List<List<List<Double>>> inputData)
    {
      this();
      this.inputData = inputData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public precit_args(precit_args other) {
      if (other.isSetInputData()) {
        List<List<List<Double>>> __this__inputData = new ArrayList<List<List<Double>>>(other.inputData.size());
        for (List<List<Double>> other_element : other.inputData) {
          List<List<Double>> __this__inputData_copy = new ArrayList<List<Double>>(other_element.size());
          for (List<Double> other_element_element : other_element) {
            List<Double> __this__inputData_copy_copy = new ArrayList<Double>(other_element_element);
            __this__inputData_copy.add(__this__inputData_copy_copy);
          }
          __this__inputData.add(__this__inputData_copy);
        }
        this.inputData = __this__inputData;
      }
    }

    public precit_args deepCopy() {
      return new precit_args(this);
    }

    @Override
    public void clear() {
      this.inputData = null;
    }

    public int getInputDataSize() {
      return (this.inputData == null) ? 0 : this.inputData.size();
    }

    public java.util.Iterator<List<List<Double>>> getInputDataIterator() {
      return (this.inputData == null) ? null : this.inputData.iterator();
    }

    public void addToInputData(List<List<Double>> elem) {
      if (this.inputData == null) {
        this.inputData = new ArrayList<List<List<Double>>>();
      }
      this.inputData.add(elem);
    }

    public List<List<List<Double>>> getInputData() {
      return this.inputData;
    }

    public precit_args setInputData(List<List<List<Double>>> inputData) {
      this.inputData = inputData;
      return this;
    }

    public void unsetInputData() {
      this.inputData = null;
    }

    /** Returns true if field inputData is set (has been assigned a value) and false otherwise */
    public boolean isSetInputData() {
      return this.inputData != null;
    }

    public void setInputDataIsSet(boolean value) {
      if (!value) {
        this.inputData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT_DATA:
        if (value == null) {
          unsetInputData();
        } else {
          setInputData((List<List<List<Double>>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT_DATA:
        return getInputData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT_DATA:
        return isSetInputData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof precit_args)
        return this.equals((precit_args)that);
      return false;
    }

    public boolean equals(precit_args that) {
      if (that == null)
        return false;

      boolean this_present_inputData = true && this.isSetInputData();
      boolean that_present_inputData = true && that.isSetInputData();
      if (this_present_inputData || that_present_inputData) {
        if (!(this_present_inputData && that_present_inputData))
          return false;
        if (!this.inputData.equals(that.inputData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_inputData = true && (isSetInputData());
      list.add(present_inputData);
      if (present_inputData)
        list.add(inputData);

      return list.hashCode();
    }

    @Override
    public int compareTo(precit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInputData()).compareTo(other.isSetInputData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputData, other.inputData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("precit_args(");
      boolean first = true;

      sb.append("inputData:");
      if (this.inputData == null) {
        sb.append("null");
      } else {
        sb.append(this.inputData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class precit_argsStandardSchemeFactory implements SchemeFactory {
      public precit_argsStandardScheme getScheme() {
        return new precit_argsStandardScheme();
      }
    }

    private static class precit_argsStandardScheme extends StandardScheme<precit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, precit_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.inputData = new ArrayList<List<List<Double>>>(_list40.size);
                  List<List<Double>> _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    {
                      org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                      _elem41 = new ArrayList<List<Double>>(_list43.size);
                      List<Double> _elem44;
                      for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                      {
                        {
                          org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                          _elem44 = new ArrayList<Double>(_list46.size);
                          double _elem47;
                          for (int _i48 = 0; _i48 < _list46.size; ++_i48)
                          {
                            _elem47 = iprot.readDouble();
                            _elem44.add(_elem47);
                          }
                          iprot.readListEnd();
                        }
                        _elem41.add(_elem44);
                      }
                      iprot.readListEnd();
                    }
                    struct.inputData.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setInputDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, precit_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inputData != null) {
          oprot.writeFieldBegin(INPUT_DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.inputData.size()));
            for (List<List<Double>> _iter49 : struct.inputData)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter49.size()));
                for (List<Double> _iter50 : _iter49)
                {
                  {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter50.size()));
                    for (double _iter51 : _iter50)
                    {
                      oprot.writeDouble(_iter51);
                    }
                    oprot.writeListEnd();
                  }
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class precit_argsTupleSchemeFactory implements SchemeFactory {
      public precit_argsTupleScheme getScheme() {
        return new precit_argsTupleScheme();
      }
    }

    private static class precit_argsTupleScheme extends TupleScheme<precit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, precit_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInputData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInputData()) {
          {
            oprot.writeI32(struct.inputData.size());
            for (List<List<Double>> _iter52 : struct.inputData)
            {
              {
                oprot.writeI32(_iter52.size());
                for (List<Double> _iter53 : _iter52)
                {
                  {
                    oprot.writeI32(_iter53.size());
                    for (double _iter54 : _iter53)
                    {
                      oprot.writeDouble(_iter54);
                    }
                  }
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, precit_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.inputData = new ArrayList<List<List<Double>>>(_list55.size);
            List<List<Double>> _elem56;
            for (int _i57 = 0; _i57 < _list55.size; ++_i57)
            {
              {
                org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                _elem56 = new ArrayList<List<Double>>(_list58.size);
                List<Double> _elem59;
                for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                {
                  {
                    org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                    _elem59 = new ArrayList<Double>(_list61.size);
                    double _elem62;
                    for (int _i63 = 0; _i63 < _list61.size; ++_i63)
                    {
                      _elem62 = iprot.readDouble();
                      _elem59.add(_elem62);
                    }
                  }
                  _elem56.add(_elem59);
                }
              }
              struct.inputData.add(_elem56);
            }
          }
          struct.setInputDataIsSet(true);
        }
      }
    }

  }

  public static class precit_result implements org.apache.thrift.TBase<precit_result, precit_result._Fields>, java.io.Serializable, Cloneable, Comparable<precit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("precit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new precit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new precit_resultTupleSchemeFactory());
    }

    public List<List<Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(precit_result.class, metaDataMap);
    }

    public precit_result() {
    }

    public precit_result(
      List<List<Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public precit_result(precit_result other) {
      if (other.isSetSuccess()) {
        List<List<Double>> __this__success = new ArrayList<List<Double>>(other.success.size());
        for (List<Double> other_element : other.success) {
          List<Double> __this__success_copy = new ArrayList<Double>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public precit_result deepCopy() {
      return new precit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<Double>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<Double> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<Double>>();
      }
      this.success.add(elem);
    }

    public List<List<Double>> getSuccess() {
      return this.success;
    }

    public precit_result setSuccess(List<List<Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<Double>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof precit_result)
        return this.equals((precit_result)that);
      return false;
    }

    public boolean equals(precit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(precit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("precit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class precit_resultStandardSchemeFactory implements SchemeFactory {
      public precit_resultStandardScheme getScheme() {
        return new precit_resultStandardScheme();
      }
    }

    private static class precit_resultStandardScheme extends StandardScheme<precit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, precit_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<List<Double>>(_list64.size);
                  List<Double> _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    {
                      org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                      _elem65 = new ArrayList<Double>(_list67.size);
                      double _elem68;
                      for (int _i69 = 0; _i69 < _list67.size; ++_i69)
                      {
                        _elem68 = iprot.readDouble();
                        _elem65.add(_elem68);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, precit_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<Double> _iter70 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter70.size()));
                for (double _iter71 : _iter70)
                {
                  oprot.writeDouble(_iter71);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class precit_resultTupleSchemeFactory implements SchemeFactory {
      public precit_resultTupleScheme getScheme() {
        return new precit_resultTupleScheme();
      }
    }

    private static class precit_resultTupleScheme extends TupleScheme<precit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, precit_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<Double> _iter72 : struct.success)
            {
              {
                oprot.writeI32(_iter72.size());
                for (double _iter73 : _iter72)
                {
                  oprot.writeDouble(_iter73);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, precit_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<Double>>(_list74.size);
            List<Double> _elem75;
            for (int _i76 = 0; _i76 < _list74.size; ++_i76)
            {
              {
                org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _elem75 = new ArrayList<Double>(_list77.size);
                double _elem78;
                for (int _i79 = 0; _i79 < _list77.size; ++_i79)
                {
                  _elem78 = iprot.readDouble();
                  _elem75.add(_elem78);
                }
              }
              struct.success.add(_elem75);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
