#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import logging
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def learn(self, input_data, targets, epochSize):
    """
    Parameters:
     - input_data
     - targets
     - epochSize
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def learn(self, input_data, targets, epochSize):
    """
    Parameters:
     - input_data
     - targets
     - epochSize
    """
    self.send_learn(input_data, targets, epochSize)
    self.recv_learn()

  def send_learn(self, input_data, targets, epochSize):
    self._oprot.writeMessageBegin('learn', TMessageType.CALL, self._seqid)
    args = learn_args()
    args.input_data = input_data
    args.targets = targets
    args.epochSize = epochSize
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_learn(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = learn_result()
    result.read(iprot)
    iprot.readMessageEnd()
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["learn"] = Processor.process_learn

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_learn(self, seqid, iprot, oprot):
    args = learn_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = learn_result()
    try:
      self._handler.learn(args.input_data, args.targets, args.epochSize)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("learn", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class learn_args:
  """
  Attributes:
   - input_data
   - targets
   - epochSize
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'input_data', (TType.LIST,(TType.LIST,(TType.DOUBLE,None))), None, ), # 1
    (2, TType.LIST, 'targets', (TType.LIST,(TType.LIST,(TType.DOUBLE,None))), None, ), # 2
    (3, TType.I16, 'epochSize', None, None, ), # 3
  )

  def __init__(self, input_data=None, targets=None, epochSize=None,):
    self.input_data = input_data
    self.targets = targets
    self.epochSize = epochSize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.input_data = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = []
            (_etype9, _size6) = iprot.readListBegin()
            for _i10 in xrange(_size6):
              _elem11 = []
              (_etype15, _size12) = iprot.readListBegin()
              for _i16 in xrange(_size12):
                _elem17 = iprot.readDouble()
                _elem11.append(_elem17)
              iprot.readListEnd()
              _elem5.append(_elem11)
            iprot.readListEnd()
            self.input_data.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.targets = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = []
            (_etype27, _size24) = iprot.readListBegin()
            for _i28 in xrange(_size24):
              _elem29 = []
              (_etype33, _size30) = iprot.readListBegin()
              for _i34 in xrange(_size30):
                _elem35 = iprot.readDouble()
                _elem29.append(_elem35)
              iprot.readListEnd()
              _elem23.append(_elem29)
            iprot.readListEnd()
            self.targets.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.epochSize = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('learn_args')
    if self.input_data is not None:
      oprot.writeFieldBegin('input_data', TType.LIST, 1)
      oprot.writeListBegin(TType.LIST, len(self.input_data))
      for iter36 in self.input_data:
        oprot.writeListBegin(TType.LIST, len(iter36))
        for iter37 in iter36:
          oprot.writeListBegin(TType.DOUBLE, len(iter37))
          for iter38 in iter37:
            oprot.writeDouble(iter38)
          oprot.writeListEnd()
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.targets is not None:
      oprot.writeFieldBegin('targets', TType.LIST, 2)
      oprot.writeListBegin(TType.LIST, len(self.targets))
      for iter39 in self.targets:
        oprot.writeListBegin(TType.LIST, len(iter39))
        for iter40 in iter39:
          oprot.writeListBegin(TType.DOUBLE, len(iter40))
          for iter41 in iter40:
            oprot.writeDouble(iter41)
          oprot.writeListEnd()
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.epochSize is not None:
      oprot.writeFieldBegin('epochSize', TType.I16, 3)
      oprot.writeI16(self.epochSize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.input_data)
    value = (value * 31) ^ hash(self.targets)
    value = (value * 31) ^ hash(self.epochSize)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class learn_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('learn_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
